{"ast":null,"code":"// // src/components/ShaderBackground.tsx\n// import React, { useRef, useEffect } from \"react\";\n// import * as THREE from \"three\";\n// import vertexShader from \"../shaders/vertex.glsl\";\n// import fragmentShader from \"../shaders/fragment.glsl\";\n\n// const ShaderBackground = () => {\n//     const mountRef = useRef<HTMLDivElement>(null);\n\n//     useEffect(() => {\n//         const width = window.innerWidth;\n//         const height = window.innerHeight;\n\n//         const scene = new THREE.Scene();\n//         const camera = new THREE.Camera();\n//         camera.position.z = 1;\n\n//         const renderer = new THREE.WebGLRenderer();\n//         renderer.setSize(width, height);\n//         if (mountRef.current) {\n//             mountRef.current.appendChild(renderer.domElement);\n//         }\n\n//         const uniforms = {\n//         u_time: { value: 0.0 },\n//         u_resolution: { value: new THREE.Vector2(width, height) },\n//         };\n\n//         const material = new THREE.ShaderMaterial({\n//         uniforms,\n//         vertexShader,\n//         fragmentShader,\n//         });\n\n//         const geometry = new THREE.PlaneGeometry(2, 2);\n//         const mesh = new THREE.Mesh(geometry, material);\n//         scene.add(mesh);\n\n//         const animate = () => {\n//         uniforms.u_time.value += 0.05;\n//         renderer.render(scene, camera);\n//         requestAnimationFrame(animate);\n//         };\n\n//         animate();\n//         if (mountRef.current) {\n//             mountRef.current.removeChild(renderer.domElement);\n//         }\n//         return () => {\n//         if (mountRef.current) {\n//             mountRef.current.removeChild(renderer.domElement);\n//         }\n//         };\n//     }, []);\n\n//     return <div ref={mountRef} style={{ position: \"fixed\", top: 0, left: 0, width: \"100%\", height: \"100%\", zIndex: -1 }} />;\n// };\n\n// export default ShaderBackground;","map":{"version":3,"names":[],"sources":["C:/MERN-FIA-PORTAL/client/src/components/ShaderGradient.js"],"sourcesContent":["// // src/components/ShaderBackground.tsx\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import * as THREE from \"three\";\r\n// import vertexShader from \"../shaders/vertex.glsl\";\r\n// import fragmentShader from \"../shaders/fragment.glsl\";\r\n\r\n// const ShaderBackground = () => {\r\n//     const mountRef = useRef<HTMLDivElement>(null);\r\n\r\n//     useEffect(() => {\r\n//         const width = window.innerWidth;\r\n//         const height = window.innerHeight;\r\n\r\n//         const scene = new THREE.Scene();\r\n//         const camera = new THREE.Camera();\r\n//         camera.position.z = 1;\r\n\r\n//         const renderer = new THREE.WebGLRenderer();\r\n//         renderer.setSize(width, height);\r\n//         if (mountRef.current) {\r\n//             mountRef.current.appendChild(renderer.domElement);\r\n//         }\r\n\r\n//         const uniforms = {\r\n//         u_time: { value: 0.0 },\r\n//         u_resolution: { value: new THREE.Vector2(width, height) },\r\n//         };\r\n\r\n//         const material = new THREE.ShaderMaterial({\r\n//         uniforms,\r\n//         vertexShader,\r\n//         fragmentShader,\r\n//         });\r\n\r\n//         const geometry = new THREE.PlaneGeometry(2, 2);\r\n//         const mesh = new THREE.Mesh(geometry, material);\r\n//         scene.add(mesh);\r\n\r\n//         const animate = () => {\r\n//         uniforms.u_time.value += 0.05;\r\n//         renderer.render(scene, camera);\r\n//         requestAnimationFrame(animate);\r\n//         };\r\n\r\n//         animate();\r\n//         if (mountRef.current) {\r\n//             mountRef.current.removeChild(renderer.domElement);\r\n//         }\r\n//         return () => {\r\n//         if (mountRef.current) {\r\n//             mountRef.current.removeChild(renderer.domElement);\r\n//         }\r\n//         };\r\n//     }, []);\r\n\r\n//     return <div ref={mountRef} style={{ position: \"fixed\", top: 0, left: 0, width: \"100%\", height: \"100%\", zIndex: -1 }} />;\r\n// };\r\n\r\n// export default ShaderBackground;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}