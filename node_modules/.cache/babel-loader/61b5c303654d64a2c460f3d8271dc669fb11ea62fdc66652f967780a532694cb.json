{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN-FIA-PORTAL\\\\client\\\\src\\\\components\\\\Three.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeJSBackground = () => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    // Initialize Three.js scene\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    if (containerRef.current) {\n      containerRef.current.appendChild(renderer.domElement);\n    }\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(10, 10, 10);\n    scene.add(directionalLight);\n\n    // Create particles\n    const particlesGeometry = new THREE.BufferGeometry();\n    const particlesCount = 2000;\n    const posArray = new Float32Array(particlesCount * 3);\n    const colorsArray = new Float32Array(particlesCount * 3);\n    for (let i = 0; i < particlesCount * 3; i += 3) {\n      // Position\n      posArray[i] = (Math.random() - 0.5) * 20;\n      posArray[i + 1] = (Math.random() - 0.5) * 20;\n      posArray[i + 2] = (Math.random() - 0.5) * 20;\n\n      // Colors - blue theme\n      colorsArray[i] = Math.random() * 0.5 + 0.5; // R (blue-ish)\n      colorsArray[i + 1] = Math.random() * 0.5 + 0.5; // G (blue-ish)\n      colorsArray[i + 2] = Math.random() + 0.5; // B (strong blue)\n    }\n    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArray, 3));\n    const particlesMaterial = new THREE.PointsMaterial({\n      size: 0.05,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8\n    });\n    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n    scene.add(particlesMesh);\n\n    // Create geometry objects\n    const geometryObjects = [];\n\n    // Add some spheres\n    for (let i = 0; i < 10; i++) {\n      const geometry = new THREE.SphereGeometry(Math.random() * 0.8 + 0.2, 32, 32);\n      const material = new THREE.MeshPhongMaterial({\n        color: new THREE.Color(Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() + 0.5),\n        transparent: true,\n        opacity: 0.8\n      });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.x = (Math.random() - 0.5) * 15;\n      mesh.position.y = (Math.random() - 0.5) * 15;\n      mesh.position.z = (Math.random() - 0.5) * 15;\n      mesh.rotation.x = Math.random() * Math.PI;\n      mesh.rotation.y = Math.random() * Math.PI;\n      mesh.speed = {\n        rotation: {\n          x: (Math.random() - 0.5) * 0.005,\n          y: (Math.random() - 0.5) * 0.005,\n          z: (Math.random() - 0.5) * 0.005\n        }\n      };\n      scene.add(mesh);\n      geometryObjects.push(mesh);\n    }\n\n    // Add some torus knots\n    for (let i = 0; i < 5; i++) {\n      const geometry = new THREE.TorusKnotGeometry(Math.random() * 0.5 + 0.5, 0.2, 64, 8);\n      const material = new THREE.MeshPhongMaterial({\n        color: new THREE.Color(Math.random() * 0.5 + 0.5, Math.random() * 0.5 + 0.5, Math.random() + 0.5),\n        transparent: true,\n        opacity: 0.7\n      });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.x = (Math.random() - 0.5) * 15;\n      mesh.position.y = (Math.random() - 0.5) * 15;\n      mesh.position.z = (Math.random() - 0.5) * 15;\n      mesh.rotation.x = Math.random() * Math.PI;\n      mesh.rotation.y = Math.random() * Math.PI;\n      mesh.speed = {\n        rotation: {\n          x: (Math.random() - 0.5) * 0.005,\n          y: (Math.random() - 0.5) * 0.005,\n          z: (Math.random() - 0.5) * 0.005\n        }\n      };\n      scene.add(mesh);\n      geometryObjects.push(mesh);\n    }\n\n    // Initial camera position\n    camera.position.z = 5;\n\n    // Variables for animation\n    let scrollPercent = 0;\n    let rotationSpeed = 0.001;\n\n    // Handle scroll events\n    const handleScroll = () => {\n      // Calculate scroll percentage\n      const h = document.documentElement;\n      const b = document.body;\n      const st = 'scrollTop';\n      const sh = 'scrollHeight';\n      scrollPercent = (h[st] || b[st]) / ((h[sh] || b[sh]) - h.clientHeight);\n    };\n    window.addEventListener('scroll', handleScroll);\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Rotate the particle system\n      particlesMesh.rotation.x += rotationSpeed * 0.5;\n      particlesMesh.rotation.y += rotationSpeed * 0.2;\n\n      // Update geometric objects\n      geometryObjects.forEach(obj => {\n        obj.rotation.x += obj.speed.rotation.x;\n        obj.rotation.y += obj.speed.rotation.y;\n        obj.rotation.z += obj.speed.rotation.z;\n      });\n\n      // Update camera based on scroll\n      camera.position.z = 5 + scrollPercent * 15;\n      camera.position.y = scrollPercent * 2;\n      camera.rotation.x = -scrollPercent * 0.5;\n\n      // Render the scene\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      window.removeEventListener('resize', handleResize);\n\n      // Remove renderer from DOM\n      if (containerRef.current && containerRef.current.contains(renderer.domElement)) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n\n      // Dispose geometries and materials to prevent memory leaks\n      particlesGeometry.dispose();\n      particlesMaterial.dispose();\n      geometryObjects.forEach(obj => {\n        obj.geometry.dispose();\n        obj.material.dispose();\n        scene.remove(obj);\n      });\n      scene.remove(particlesMesh);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    id: \"canvas-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 12\n  }, this);\n};\n_s(ThreeJSBackground, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ThreeJSBackground;\nexport default ThreeJSBackground;\nvar _c;\n$RefreshReg$(_c, \"ThreeJSBackground\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","ThreeJSBackground","_s","containerRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","current","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","colorsArray","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","vertexColors","transparent","opacity","particlesMesh","Points","geometryObjects","geometry","SphereGeometry","material","MeshPhongMaterial","color","Color","mesh","Mesh","x","y","z","rotation","PI","speed","push","TorusKnotGeometry","scrollPercent","rotationSpeed","handleScroll","h","document","documentElement","b","body","st","sh","clientHeight","addEventListener","handleResize","aspect","updateProjectionMatrix","animate","requestAnimationFrame","forEach","obj","render","removeEventListener","contains","removeChild","dispose","remove","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN-FIA-PORTAL/client/src/components/Three.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst ThreeJSBackground = () => {\r\n    const containerRef = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        // Initialize Three.js scene\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        \r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        \r\n        if (containerRef.current) {\r\n            containerRef.current.appendChild(renderer.domElement);\r\n        }\r\n        \r\n        // Add ambient light\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n        \r\n        // Add directional light\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n        directionalLight.position.set(10, 10, 10);\r\n        scene.add(directionalLight);\r\n        \r\n        // Create particles\r\n        const particlesGeometry = new THREE.BufferGeometry();\r\n        const particlesCount = 2000;\r\n        \r\n        const posArray = new Float32Array(particlesCount * 3);\r\n        const colorsArray = new Float32Array(particlesCount * 3);\r\n        \r\n        for (let i = 0; i < particlesCount * 3; i += 3) {\r\n            // Position\r\n            posArray[i] = (Math.random() - 0.5) * 20;\r\n            posArray[i + 1] = (Math.random() - 0.5) * 20;\r\n            posArray[i + 2] = (Math.random() - 0.5) * 20;\r\n            \r\n            // Colors - blue theme\r\n            colorsArray[i] = Math.random() * 0.5 + 0.5;      // R (blue-ish)\r\n            colorsArray[i + 1] = Math.random() * 0.5 + 0.5;  // G (blue-ish)\r\n            colorsArray[i + 2] = Math.random() + 0.5;        // B (strong blue)\r\n        }\r\n        \r\n        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\r\n        particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArray, 3));\r\n        \r\n        const particlesMaterial = new THREE.PointsMaterial({\r\n            size: 0.05,\r\n            vertexColors: true,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\r\n        scene.add(particlesMesh);\r\n        \r\n        // Create geometry objects\r\n        const geometryObjects = [];\r\n        \r\n        // Add some spheres\r\n        for (let i = 0; i < 10; i++) {\r\n            const geometry = new THREE.SphereGeometry(Math.random() * 0.8 + 0.2, 32, 32);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: new THREE.Color(\r\n                    Math.random() * 0.5 + 0.5,\r\n                    Math.random() * 0.5 + 0.5,\r\n                    Math.random() + 0.5\r\n                ),\r\n                transparent: true,\r\n                opacity: 0.8\r\n            });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            \r\n            mesh.position.x = (Math.random() - 0.5) * 15;\r\n            mesh.position.y = (Math.random() - 0.5) * 15;\r\n            mesh.position.z = (Math.random() - 0.5) * 15;\r\n            \r\n            mesh.rotation.x = Math.random() * Math.PI;\r\n            mesh.rotation.y = Math.random() * Math.PI;\r\n            \r\n            mesh.speed = {\r\n                rotation: {\r\n                    x: (Math.random() - 0.5) * 0.005,\r\n                    y: (Math.random() - 0.5) * 0.005,\r\n                    z: (Math.random() - 0.5) * 0.005\r\n                }\r\n            };\r\n            \r\n            scene.add(mesh);\r\n            geometryObjects.push(mesh);\r\n        }\r\n        \r\n        // Add some torus knots\r\n        for (let i = 0; i < 5; i++) {\r\n            const geometry = new THREE.TorusKnotGeometry(\r\n                Math.random() * 0.5 + 0.5,\r\n                0.2,\r\n                64,\r\n                8\r\n            );\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: new THREE.Color(\r\n                    Math.random() * 0.5 + 0.5,\r\n                    Math.random() * 0.5 + 0.5,\r\n                    Math.random() + 0.5\r\n                ),\r\n                transparent: true,\r\n                opacity: 0.7\r\n            });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            \r\n            mesh.position.x = (Math.random() - 0.5) * 15;\r\n            mesh.position.y = (Math.random() - 0.5) * 15;\r\n            mesh.position.z = (Math.random() - 0.5) * 15;\r\n            \r\n            mesh.rotation.x = Math.random() * Math.PI;\r\n            mesh.rotation.y = Math.random() * Math.PI;\r\n            \r\n            mesh.speed = {\r\n                rotation: {\r\n                    x: (Math.random() - 0.5) * 0.005,\r\n                    y: (Math.random() - 0.5) * 0.005,\r\n                    z: (Math.random() - 0.5) * 0.005\r\n                }\r\n            };\r\n            \r\n            scene.add(mesh);\r\n            geometryObjects.push(mesh);\r\n        }\r\n        \r\n        // Initial camera position\r\n        camera.position.z = 5;\r\n        \r\n        // Variables for animation\r\n        let scrollPercent = 0;\r\n        let rotationSpeed = 0.001;\r\n        \r\n        // Handle scroll events\r\n        const handleScroll = () => {\r\n            // Calculate scroll percentage\r\n            const h = document.documentElement;\r\n            const b = document.body;\r\n            const st = 'scrollTop';\r\n            const sh = 'scrollHeight';\r\n            \r\n            scrollPercent = (h[st]||b[st]) / ((h[sh]||b[sh]) - h.clientHeight);\r\n        };\r\n        \r\n        window.addEventListener('scroll', handleScroll);\r\n        \r\n        // Handle window resize\r\n        const handleResize = () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        };\r\n        \r\n        window.addEventListener('resize', handleResize);\r\n        \r\n        // Animation loop\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            \r\n            // Rotate the particle system\r\n            particlesMesh.rotation.x += rotationSpeed * 0.5;\r\n            particlesMesh.rotation.y += rotationSpeed * 0.2;\r\n            \r\n            // Update geometric objects\r\n            geometryObjects.forEach(obj => {\r\n                obj.rotation.x += obj.speed.rotation.x;\r\n                obj.rotation.y += obj.speed.rotation.y;\r\n                obj.rotation.z += obj.speed.rotation.z;\r\n            });\r\n            \r\n            // Update camera based on scroll\r\n            camera.position.z = 5 + scrollPercent * 15;\r\n            camera.position.y = scrollPercent * 2;\r\n            camera.rotation.x = -scrollPercent * 0.5;\r\n            \r\n            // Render the scene\r\n            renderer.render(scene, camera);\r\n        };\r\n        \r\n        animate();\r\n        \r\n        // Cleanup function\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n            window.removeEventListener('resize', handleResize);\r\n            \r\n            // Remove renderer from DOM\r\n            if (containerRef.current && containerRef.current.contains(renderer.domElement)) {\r\n                containerRef.current.removeChild(renderer.domElement);\r\n            }\r\n            \r\n            // Dispose geometries and materials to prevent memory leaks\r\n            particlesGeometry.dispose();\r\n            particlesMaterial.dispose();\r\n            \r\n            geometryObjects.forEach(obj => {\r\n                obj.geometry.dispose();\r\n                obj.material.dispose();\r\n                scene.remove(obj);\r\n            });\r\n            \r\n            scene.remove(particlesMesh);\r\n            renderer.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return <div ref={containerRef} id=\"canvas-container\" />;\r\n};\r\n\r\nexport default ThreeJSBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}