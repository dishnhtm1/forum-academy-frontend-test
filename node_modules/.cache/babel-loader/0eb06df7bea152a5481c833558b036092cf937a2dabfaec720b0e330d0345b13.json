{"ast":null,"code":"var _jsxFileName = \"C:\\\\forum-academy-mern\\\\client\\\\src\\\\components\\\\StatsSection.js\";\n// import React, { useState, useEffect, useRef } from 'react';\n// import '../styles/StatsSection.css'; // Assuming you have a CSS file for styling\n\n// const StatsSection = () => {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const sectionRef = useRef(null);\n\n//     const statsData = [\n//         {\n//             value: 95,\n//             suffix: '%',\n//             label: 'Job Placement Rate',\n//             icon: 'fa-solid fa-briefcase'\n//         },\n//         {\n//             value: 50,\n//             suffix: '+',\n//             label: 'Industry Partners',\n//             icon: 'fa-solid fa-handshake'\n//         },\n//         {\n//             value: 15,\n//             suffix: '+',\n//             label: 'Specialized Programs',\n//             icon: 'fa-solid fa-graduation-cap'\n//         },\n//         {\n//             value: 2000,\n//             suffix: '+',\n//             label: 'Graduates',\n//             icon: 'fa-solid fa-user-graduate'\n//         }\n//     ];\n\n//     // Counter animation\n//     const [counters, setCounters] = useState(statsData.map(() => 0));\n\n//     // Intersection Observer to trigger counter animation when section is visible\n//     useEffect(() => {\n//         const observer = new IntersectionObserver((entries) => {\n//             if (entries[0].isIntersecting) {\n//                 setIsVisible(true);\n//             }\n//         }, { threshold: 0.3 });\n\n//         if (sectionRef.current) {\n//             observer.observe(sectionRef.current);\n//         }\n\n//         return () => {\n//             if (sectionRef.current) {\n//                 observer.unobserve(sectionRef.current);\n//             }\n//         };\n//     }, []);\n\n//     // Animate counters when section becomes visible\n//     useEffect(() => {\n//         if (!isVisible) return;\n\n//         statsData.forEach((stat, index) => {\n//             const duration = 2000; // 2 seconds for animation\n//             const interval = 20; // update every 20ms\n//             const steps = duration / interval;\n//             const increment = stat.value / steps;\n//             let count = 0;\n//             let currentCount = 0;\n\n//             const timer = setInterval(() => {\n//                 count++;\n//                 currentCount += increment;\n\n//                 if (count >= steps) {\n//                     clearInterval(timer);\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = stat.value;\n//                         return newCounters;\n//                     });\n//                 } else {\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = Math.round(currentCount);\n//                         return newCounters;\n//                     });\n//                 }\n//             }, interval);\n\n//             return () => clearInterval(timer);\n//         });\n//     }, [isVisible, statsData]);\n\n//     return (\n//         <section className=\"stats-section\" ref={sectionRef}>\n//             <div className=\"stats-bg-pattern\"></div>\n//             <div className=\"stats-overlay\"></div>\n//             <div className=\"container\">\n//                 <div className=\"stats-header\">\n//                     <h2>Our Impact in Numbers</h2>\n//                     <p>Driving education excellence through measurable outcomes</p>\n//                 </div>\n//                 <div className=\"stats-grid\">\n//                     {statsData.map((stat, index) => (\n//                         <div \n//                             className=\"stat-item\" \n//                             key={index} \n//                             data-aos=\"fade-up\" \n//                             data-aos-delay={index * 100}\n//                         >\n//                             <div className=\"stat-icon\">\n//                                 <i className={stat.icon}></i>\n//                             </div>\n//                             <div className=\"stat-value\">\n//                                 <span className=\"counter\">{counters[index]}</span>\n//                                 <span className=\"suffix\">{stat.suffix}</span>\n//                             </div>\n//                             <p className=\"stat-label\">{stat.label}</p>\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n//         </section>\n//     );\n// };\n\n// export default StatsSection;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/StatsSection.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatsSection = () => {\n  const statsData = [{\n    value: 95,\n    suffix: '%',\n    label: 'Job Placement Rate',\n    icon: 'fa-solid fa-briefcase'\n  }, {\n    value: 50,\n    suffix: '+',\n    label: 'Industry Partners',\n    icon: 'fa-solid fa-handshake'\n  }, {\n    value: 15,\n    suffix: '+',\n    label: 'Specialized Programs',\n    icon: 'fa-solid fa-graduation-cap'\n  }, {\n    value: 2000,\n    suffix: '+',\n    label: 'Graduates',\n    icon: 'fa-solid fa-user-graduate'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"stats-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-bg-pattern\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats-overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Our Impact in Numbers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Driving education excellence through measurable outcomes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-grid\",\n        children: statsData.map((stat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          \"data-aos\": \"fade-up\",\n          \"data-aos-delay\": index * 100,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: stat.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"counter\",\n              children: stat.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"suffix\",\n              children: stat.suffix\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"stat-label\",\n            children: stat.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n_c = StatsSection;\nexport default StatsSection;\nvar _c;\n$RefreshReg$(_c, \"StatsSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","StatsSection","statsData","value","suffix","label","icon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","stat","index","_c","$RefreshReg$"],"sources":["C:/forum-academy-mern/client/src/components/StatsSection.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import '../styles/StatsSection.css'; // Assuming you have a CSS file for styling\n\n// const StatsSection = () => {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const sectionRef = useRef(null);\n    \n//     const statsData = [\n//         {\n//             value: 95,\n//             suffix: '%',\n//             label: 'Job Placement Rate',\n//             icon: 'fa-solid fa-briefcase'\n//         },\n//         {\n//             value: 50,\n//             suffix: '+',\n//             label: 'Industry Partners',\n//             icon: 'fa-solid fa-handshake'\n//         },\n//         {\n//             value: 15,\n//             suffix: '+',\n//             label: 'Specialized Programs',\n//             icon: 'fa-solid fa-graduation-cap'\n//         },\n//         {\n//             value: 2000,\n//             suffix: '+',\n//             label: 'Graduates',\n//             icon: 'fa-solid fa-user-graduate'\n//         }\n//     ];\n\n//     // Counter animation\n//     const [counters, setCounters] = useState(statsData.map(() => 0));\n\n//     // Intersection Observer to trigger counter animation when section is visible\n//     useEffect(() => {\n//         const observer = new IntersectionObserver((entries) => {\n//             if (entries[0].isIntersecting) {\n//                 setIsVisible(true);\n//             }\n//         }, { threshold: 0.3 });\n        \n//         if (sectionRef.current) {\n//             observer.observe(sectionRef.current);\n//         }\n        \n//         return () => {\n//             if (sectionRef.current) {\n//                 observer.unobserve(sectionRef.current);\n//             }\n//         };\n//     }, []);\n\n//     // Animate counters when section becomes visible\n//     useEffect(() => {\n//         if (!isVisible) return;\n        \n//         statsData.forEach((stat, index) => {\n//             const duration = 2000; // 2 seconds for animation\n//             const interval = 20; // update every 20ms\n//             const steps = duration / interval;\n//             const increment = stat.value / steps;\n//             let count = 0;\n//             let currentCount = 0;\n            \n//             const timer = setInterval(() => {\n//                 count++;\n//                 currentCount += increment;\n                \n//                 if (count >= steps) {\n//                     clearInterval(timer);\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = stat.value;\n//                         return newCounters;\n//                     });\n//                 } else {\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = Math.round(currentCount);\n//                         return newCounters;\n//                     });\n//                 }\n//             }, interval);\n            \n//             return () => clearInterval(timer);\n//         });\n//     }, [isVisible, statsData]);\n\n//     return (\n//         <section className=\"stats-section\" ref={sectionRef}>\n//             <div className=\"stats-bg-pattern\"></div>\n//             <div className=\"stats-overlay\"></div>\n//             <div className=\"container\">\n//                 <div className=\"stats-header\">\n//                     <h2>Our Impact in Numbers</h2>\n//                     <p>Driving education excellence through measurable outcomes</p>\n//                 </div>\n//                 <div className=\"stats-grid\">\n//                     {statsData.map((stat, index) => (\n//                         <div \n//                             className=\"stat-item\" \n//                             key={index} \n//                             data-aos=\"fade-up\" \n//                             data-aos-delay={index * 100}\n//                         >\n//                             <div className=\"stat-icon\">\n//                                 <i className={stat.icon}></i>\n//                             </div>\n//                             <div className=\"stat-value\">\n//                                 <span className=\"counter\">{counters[index]}</span>\n//                                 <span className=\"suffix\">{stat.suffix}</span>\n//                             </div>\n//                             <p className=\"stat-label\">{stat.label}</p>\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n//         </section>\n//     );\n// };\n\n// export default StatsSection;\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/StatsSection.css'; // Assuming you have a CSS file for styling\n\nconst StatsSection = () => {\n    const statsData = [\n        {\n            value: 95,\n            suffix: '%',\n            label: 'Job Placement Rate',\n            icon: 'fa-solid fa-briefcase'\n        },\n        {\n            value: 50,\n            suffix: '+',\n            label: 'Industry Partners',\n            icon: 'fa-solid fa-handshake'\n        },\n        {\n            value: 15,\n            suffix: '+',\n            label: 'Specialized Programs',\n            icon: 'fa-solid fa-graduation-cap'\n        },\n        {\n            value: 2000,\n            suffix: '+',\n            label: 'Graduates',\n            icon: 'fa-solid fa-user-graduate'\n        }\n    ];\n\n    return (\n        <section className=\"stats-section\">\n            <div className=\"stats-bg-pattern\"></div>\n            <div className=\"stats-overlay\"></div>\n            <div className=\"container\">\n                <div className=\"stats-header\">\n                    <h2>Our Impact in Numbers</h2>\n                    <p>Driving education excellence through measurable outcomes</p>\n                </div>\n                <div className=\"stats-grid\">\n                    {statsData.map((stat, index) => (\n                        <div \n                            className=\"stat-item\" \n                            key={index} \n                            data-aos=\"fade-up\" \n                            data-aos-delay={index * 100}\n                        >\n                            <div className=\"stat-icon\">\n                                <i className={stat.icon}></i>\n                            </div>\n                            <div className=\"stat-value\">\n                                <span className=\"counter\">{stat.value}</span>\n                                <span className=\"suffix\">{stat.suffix}</span>\n                            </div>\n                            <p className=\"stat-label\">{stat.label}</p>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default StatsSection;"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,4BAA4B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,MAAMC,SAAS,GAAG,CACd;IACIC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,GAAG;IACXC,KAAK,EAAE,oBAAoB;IAC3BC,IAAI,EAAE;EACV,CAAC,EACD;IACIH,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,GAAG;IACXC,KAAK,EAAE,mBAAmB;IAC1BC,IAAI,EAAE;EACV,CAAC,EACD;IACIH,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,GAAG;IACXC,KAAK,EAAE,sBAAsB;IAC7BC,IAAI,EAAE;EACV,CAAC,EACD;IACIH,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,GAAG;IACXC,KAAK,EAAE,WAAW;IAClBC,IAAI,EAAE;EACV,CAAC,CACJ;EAED,oBACIN,OAAA;IAASO,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC9BR,OAAA;MAAKO,SAAS,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxCZ,OAAA;MAAKO,SAAS,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACrCZ,OAAA;MAAKO,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtBR,OAAA;QAAKO,SAAS,EAAC,cAAc;QAAAC,QAAA,gBACzBR,OAAA;UAAAQ,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BZ,OAAA;UAAAQ,QAAA,EAAG;QAAwD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC,eACNZ,OAAA;QAAKO,SAAS,EAAC,YAAY;QAAAC,QAAA,EACtBN,SAAS,CAACW,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACvBf,OAAA;UACIO,SAAS,EAAC,WAAW;UAErB,YAAS,SAAS;UAClB,kBAAgBQ,KAAK,GAAG,GAAI;UAAAP,QAAA,gBAE5BR,OAAA;YAAKO,SAAS,EAAC,WAAW;YAAAC,QAAA,eACtBR,OAAA;cAAGO,SAAS,EAAEO,IAAI,CAACR;YAAK;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC,eACNZ,OAAA;YAAKO,SAAS,EAAC,YAAY;YAAAC,QAAA,gBACvBR,OAAA;cAAMO,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAEM,IAAI,CAACX;YAAK;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7CZ,OAAA;cAAMO,SAAS,EAAC,QAAQ;cAAAC,QAAA,EAAEM,IAAI,CAACV;YAAM;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C,CAAC,eACNZ,OAAA;YAAGO,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEM,IAAI,CAACT;UAAK;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAXrCG,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYT,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAElB,CAAC;AAACI,EAAA,GA3DIf,YAAY;AA6DlB,eAAeA,YAAY;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}