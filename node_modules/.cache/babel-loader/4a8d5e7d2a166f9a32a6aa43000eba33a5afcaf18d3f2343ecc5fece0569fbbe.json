{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN-FIA-PORTAL\\\\client\\\\src\\\\components\\\\ShaderGradient.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\n\n// Updated shader code to match shadergradient.co parameters\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexShader = `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\nconst fragmentShader = `\n    uniform float u_time;\n    uniform vec2 u_resolution;\n    varying vec2 vUv;\n\n    // Noise functions from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n    float rand(vec2 n) { \n        return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n    }\n    \n    float noise(vec2 p){\n        vec2 ip = floor(p);\n        vec2 u = fract(p);\n        u = u*u*(3.0-2.0*u);\n        \n        float res = mix(\n            mix(rand(ip), rand(ip+vec2(1.0,0.0)), u.x),\n            mix(rand(ip+vec2(0.0,1.0)), rand(ip+vec2(1.0,1.0)), u.x), u.y);\n        return res*res;\n    }\n\n    void main() {\n        vec2 st = vUv;\n        \n        // Use the exact colors from your shadergradient.co URL\n        vec3 color1 = vec3(0.98, 0.31, 0.02); // #ff5005\n        vec3 color2 = vec3(0.86, 0.73, 0.58); // #dbba95\n        vec3 color3 = vec3(0.82, 0.74, 0.88); // #d0bce1\n        \n        // Using the parameters from your URL\n        float uDensity = 1.3;\n        float uFrequency = 5.5;\n        float uSpeed = 0.4;\n        float uStrength = 4.0;\n        \n        // Create animated gradient with rotation\n        float t = u_time * uSpeed;\n        \n        // Apply rotation (rotationZ = 50 from URL)\n        float angle = radians(50.0);\n        vec2 rotated = vec2(\n            st.x * cos(angle) - st.y * sin(angle),\n            st.x * sin(angle) + st.y * cos(angle)\n        );\n        \n        // Apply position offset (positionX = -1.4 from URL)\n        rotated.x += -1.4;\n        \n        // Create wave pattern\n        vec2 pos = rotated * 2.0 - 1.0;\n        float d = length(pos) * uDensity;\n        float wave = sin(d * uFrequency - t) * uStrength * (1.0 - min(1.0, d));\n        wave = max(0.0, wave);\n        \n        // Mix colors based on position and wave\n        vec3 color = mix(color1, color2, st.x);\n        color = mix(color, color3, st.y);\n        color = mix(color, vec3(1.0), wave * 0.3);\n        \n        // Add grain effect (grain = on from URL)\n        float grain = noise(st * 500.0) * 0.05;\n        color = color + grain - 0.025;\n        \n        // Apply brightness (brightness = 1.2 from URL)\n        color *= 1.2;\n        \n        gl_FragColor = vec4(color, 1.0);\n    }\n`;\nconst ShaderBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    if (!mountRef.current) return;\n\n    // Create scene with black background (bgColor1=%23000000 from URL)\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n\n    // Camera setup with parameters from URL\n    const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\n    camera.position.z = 3.6; // cDistance=3.6\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    mountRef.current.appendChild(renderer.domElement);\n    const uniforms = {\n      u_time: {\n        value: 0.0\n      },\n      u_resolution: {\n        value: new THREE.Vector2(width, height)\n      }\n    };\n    const material = new THREE.ShaderMaterial({\n      uniforms,\n      vertexShader,\n      fragmentShader\n    });\n\n    // Create a plane geometry for the shader (type=plane from URL)\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light (lightType=3d from URL)\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    // Animation loop\n    const animate = () => {\n      uniforms.u_time.value += 0.05;\n      renderer.render(scene, camera);\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    // Store for cleanup\n    let animationFrameId = requestAnimationFrame(animate);\n\n    // Handle window resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      uniforms.u_resolution.value.set(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n      geometry.dispose();\n      material.dispose();\n      if (mountRef.current && mountRef.current.contains(renderer.domElement)) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: -1,\n      overflow: \"hidden\",\n      backgroundColor: \"#000000\" // Fall back color while loading\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n_s(ShaderBackground, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ShaderBackground;\nexport default ShaderBackground;\nvar _c;\n$RefreshReg$(_c, \"ShaderBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","vertexShader","fragmentShader","ShaderBackground","_s","mountRef","width","window","innerWidth","height","innerHeight","current","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","uniforms","u_time","value","u_resolution","Vector2","material","ShaderMaterial","geometry","PlaneGeometry","mesh","Mesh","add","ambientLight","AmbientLight","directionalLight","DirectionalLight","set","animate","render","animationFrameId","requestAnimationFrame","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","contains","removeChild","ref","style","top","left","zIndex","overflow","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN-FIA-PORTAL/client/src/components/ShaderGradient.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\n// Updated shader code to match shadergradient.co parameters\r\nconst vertexShader = `\r\n    varying vec2 vUv;\r\n    void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n`;\r\n\r\nconst fragmentShader = `\r\n    uniform float u_time;\r\n    uniform vec2 u_resolution;\r\n    varying vec2 vUv;\r\n\r\n    // Noise functions from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\r\n    float rand(vec2 n) { \r\n        return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n    }\r\n    \r\n    float noise(vec2 p){\r\n        vec2 ip = floor(p);\r\n        vec2 u = fract(p);\r\n        u = u*u*(3.0-2.0*u);\r\n        \r\n        float res = mix(\r\n            mix(rand(ip), rand(ip+vec2(1.0,0.0)), u.x),\r\n            mix(rand(ip+vec2(0.0,1.0)), rand(ip+vec2(1.0,1.0)), u.x), u.y);\r\n        return res*res;\r\n    }\r\n\r\n    void main() {\r\n        vec2 st = vUv;\r\n        \r\n        // Use the exact colors from your shadergradient.co URL\r\n        vec3 color1 = vec3(0.98, 0.31, 0.02); // #ff5005\r\n        vec3 color2 = vec3(0.86, 0.73, 0.58); // #dbba95\r\n        vec3 color3 = vec3(0.82, 0.74, 0.88); // #d0bce1\r\n        \r\n        // Using the parameters from your URL\r\n        float uDensity = 1.3;\r\n        float uFrequency = 5.5;\r\n        float uSpeed = 0.4;\r\n        float uStrength = 4.0;\r\n        \r\n        // Create animated gradient with rotation\r\n        float t = u_time * uSpeed;\r\n        \r\n        // Apply rotation (rotationZ = 50 from URL)\r\n        float angle = radians(50.0);\r\n        vec2 rotated = vec2(\r\n            st.x * cos(angle) - st.y * sin(angle),\r\n            st.x * sin(angle) + st.y * cos(angle)\r\n        );\r\n        \r\n        // Apply position offset (positionX = -1.4 from URL)\r\n        rotated.x += -1.4;\r\n        \r\n        // Create wave pattern\r\n        vec2 pos = rotated * 2.0 - 1.0;\r\n        float d = length(pos) * uDensity;\r\n        float wave = sin(d * uFrequency - t) * uStrength * (1.0 - min(1.0, d));\r\n        wave = max(0.0, wave);\r\n        \r\n        // Mix colors based on position and wave\r\n        vec3 color = mix(color1, color2, st.x);\r\n        color = mix(color, color3, st.y);\r\n        color = mix(color, vec3(1.0), wave * 0.3);\r\n        \r\n        // Add grain effect (grain = on from URL)\r\n        float grain = noise(st * 500.0) * 0.05;\r\n        color = color + grain - 0.025;\r\n        \r\n        // Apply brightness (brightness = 1.2 from URL)\r\n        color *= 1.2;\r\n        \r\n        gl_FragColor = vec4(color, 1.0);\r\n    }\r\n`;\r\n\r\nconst ShaderBackground = () => {\r\n    const mountRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n\r\n        if (!mountRef.current) return;\r\n\r\n        // Create scene with black background (bgColor1=%23000000 from URL)\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(0x000000);\r\n        \r\n        // Camera setup with parameters from URL\r\n        const camera = new THREE.PerspectiveCamera(45, width / height, 0.1, 1000);\r\n        camera.position.z = 3.6; // cDistance=3.6\r\n        \r\n        // Renderer setup\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(width, height);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        const uniforms = {\r\n            u_time: { value: 0.0 },\r\n            u_resolution: { value: new THREE.Vector2(width, height) },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms,\r\n            vertexShader,\r\n            fragmentShader,\r\n        });\r\n\r\n        // Create a plane geometry for the shader (type=plane from URL)\r\n        const geometry = new THREE.PlaneGeometry(2, 2);\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        scene.add(mesh);\r\n\r\n        // Add ambient light\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n        \r\n        // Add directional light (lightType=3d from URL)\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);\r\n        directionalLight.position.set(1, 1, 1);\r\n        scene.add(directionalLight);\r\n\r\n        // Animation loop\r\n        const animate = () => {\r\n            uniforms.u_time.value += 0.05;\r\n            renderer.render(scene, camera);\r\n            animationFrameId = requestAnimationFrame(animate);\r\n        };\r\n\r\n        // Store for cleanup\r\n        let animationFrameId = requestAnimationFrame(animate);\r\n\r\n        // Handle window resize\r\n        const handleResize = () => {\r\n            const width = window.innerWidth;\r\n            const height = window.innerHeight;\r\n            \r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(width, height);\r\n            uniforms.u_resolution.value.set(width, height);\r\n        };\r\n        \r\n        window.addEventListener('resize', handleResize);\r\n\r\n        // Cleanup\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            cancelAnimationFrame(animationFrameId);\r\n            \r\n            geometry.dispose();\r\n            material.dispose();\r\n            \r\n            if (mountRef.current && mountRef.current.contains(renderer.domElement)) {\r\n                mountRef.current.removeChild(renderer.domElement);\r\n            }\r\n            \r\n            renderer.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div \r\n            ref={mountRef} \r\n            style={{ \r\n                position: \"fixed\", \r\n                top: 0, \r\n                left: 0, \r\n                width: \"100%\", \r\n                height: \"100%\", \r\n                zIndex: -1,\r\n                overflow: \"hidden\",\r\n                backgroundColor: \"#000000\" // Fall back color while loading\r\n            }} \r\n        />\r\n    );\r\n};\r\n\r\nexport default ShaderBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}