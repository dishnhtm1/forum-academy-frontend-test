{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN-FIA-PORTAL\\\\client\\\\src\\\\components\\\\Three.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShaderGradient = () => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Create scene\n    const scene = new THREE.Scene();\n\n    // Create camera\n    const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Create renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Append renderer to the component\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create shader material\n    const gradientShader = {\n      uniforms: {\n        time: {\n          value: 1.0\n        },\n        resolution: {\n          value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n        },\n        color1: {\n          value: new THREE.Color('#ff5005')\n        },\n        color2: {\n          value: new THREE.Color('#dbba95')\n        },\n        color3: {\n          value: new THREE.Color('#d0bce1')\n        }\n      },\n      vertexShader: `\n            varying vec2 vUv;\n            void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `,\n      fragmentShader: `\n            uniform float time;\n            uniform vec2 resolution;\n            uniform vec3 color1;\n            uniform vec3 color2;\n            uniform vec3 color3;\n            varying vec2 vUv;\n            \n            void main() {\n            // Create wave pattern\n            float frequency = 5.5;\n            float speed = 0.4;\n            float strength = 4.0;\n            float density = 1.3;\n            \n            vec2 p = vUv * 2.0 - 1.0;\n            vec2 pos = p * frequency;\n            float dist = length(pos);\n            \n            // Time-based animation\n            float time2 = time * speed;\n            \n            // Create waves\n            float wave = sin(dist * density - time2) * strength * (1.0 - dist);\n            wave = max(0.0, wave);\n            \n            // Mix colors based on position and wave\n            vec3 color = mix(color1, color2, vUv.x);\n            color = mix(color, color3, vUv.y);\n            color = mix(color, vec3(1.0), wave * 0.3);\n            \n            gl_FragColor = vec4(color, 1.0);\n            }\n        `\n    };\n\n    // Create plane with shader material\n    const geometry = new THREE.PlaneGeometry(10, 10, 32, 32);\n    const material = new THREE.ShaderMaterial(gradientShader);\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n\n    // Animation loop\n    const clock = new THREE.Clock();\n    const animate = () => {\n      requestAnimationFrame(animate);\n      material.uniforms.time.value = clock.getElapsedTime();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      material.uniforms.resolution.value.set(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Clean up\n    return () => {\n      var _mountRef$current;\n      window.removeEventListener('resize', handleResize);\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n      geometry.dispose();\n      material.dispose();\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100vh',\n      zIndex: -1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(ShaderGradient, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ShaderGradient;\nexport default ShaderGradient;\nvar _c;\n$RefreshReg$(_c, \"ShaderGradient\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","ShaderGradient","_s","mountRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","current","appendChild","domElement","gradientShader","uniforms","time","value","resolution","Vector2","color1","Color","color2","color3","vertexShader","fragmentShader","geometry","PlaneGeometry","material","ShaderMaterial","plane","Mesh","add","clock","Clock","animate","requestAnimationFrame","getElapsedTime","render","handleResize","aspect","updateProjectionMatrix","set","addEventListener","_mountRef$current","removeEventListener","removeChild","dispose","ref","style","top","left","width","height","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN-FIA-PORTAL/client/src/components/Three.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst ShaderGradient = () => {\r\n    const mountRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Create scene\r\n        const scene = new THREE.Scene();\r\n        \r\n        // Create camera\r\n        const camera = new THREE.PerspectiveCamera(\r\n        45, \r\n        window.innerWidth / window.innerHeight, \r\n        0.1, \r\n        1000\r\n        );\r\n        camera.position.z = 5;\r\n        \r\n        // Create renderer\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        \r\n        // Append renderer to the component\r\n        mountRef.current.appendChild(renderer.domElement);\r\n        \r\n        // Create shader material\r\n        const gradientShader = {\r\n        uniforms: {\r\n            time: { value: 1.0 },\r\n            resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\r\n            color1: { value: new THREE.Color('#ff5005') },\r\n            color2: { value: new THREE.Color('#dbba95') },\r\n            color3: { value: new THREE.Color('#d0bce1') }\r\n        },\r\n        vertexShader: `\r\n            varying vec2 vUv;\r\n            void main() {\r\n            vUv = uv;\r\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            }\r\n        `,\r\n        fragmentShader: `\r\n            uniform float time;\r\n            uniform vec2 resolution;\r\n            uniform vec3 color1;\r\n            uniform vec3 color2;\r\n            uniform vec3 color3;\r\n            varying vec2 vUv;\r\n            \r\n            void main() {\r\n            // Create wave pattern\r\n            float frequency = 5.5;\r\n            float speed = 0.4;\r\n            float strength = 4.0;\r\n            float density = 1.3;\r\n            \r\n            vec2 p = vUv * 2.0 - 1.0;\r\n            vec2 pos = p * frequency;\r\n            float dist = length(pos);\r\n            \r\n            // Time-based animation\r\n            float time2 = time * speed;\r\n            \r\n            // Create waves\r\n            float wave = sin(dist * density - time2) * strength * (1.0 - dist);\r\n            wave = max(0.0, wave);\r\n            \r\n            // Mix colors based on position and wave\r\n            vec3 color = mix(color1, color2, vUv.x);\r\n            color = mix(color, color3, vUv.y);\r\n            color = mix(color, vec3(1.0), wave * 0.3);\r\n            \r\n            gl_FragColor = vec4(color, 1.0);\r\n            }\r\n        `\r\n        };\r\n        \r\n        // Create plane with shader material\r\n        const geometry = new THREE.PlaneGeometry(10, 10, 32, 32);\r\n        const material = new THREE.ShaderMaterial(gradientShader);\r\n        const plane = new THREE.Mesh(geometry, material);\r\n        scene.add(plane);\r\n        \r\n        // Animation loop\r\n        const clock = new THREE.Clock();\r\n        const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        material.uniforms.time.value = clock.getElapsedTime();\r\n        renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n        \r\n        // Handle window resize\r\n        const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        material.uniforms.resolution.value.set(window.innerWidth, window.innerHeight);\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n        \r\n        // Clean up\r\n        return () => {\r\n        window.removeEventListener('resize', handleResize);\r\n        mountRef.current?.removeChild(renderer.domElement);\r\n        geometry.dispose();\r\n        material.dispose();\r\n        renderer.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div \r\n        ref={mountRef}\r\n        style={{\r\n            position: 'fixed',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100vh',\r\n            zIndex: -1\r\n        }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ShaderGradient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}