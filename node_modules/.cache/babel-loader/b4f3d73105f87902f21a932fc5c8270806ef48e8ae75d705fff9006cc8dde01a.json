{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import '../styles/LoginModal.css';\n\n// const LoginModal = ({ isOpen, onClose }) => {\n//     const [isStudent, setIsStudent] = useState(true);\n//     const [email, setEmail] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [rememberMe, setRememberMe] = useState(false);\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [formError, setFormError] = useState('');\n\n//     // Handle animation timing for modal appearance\n//     useEffect(() => {\n//         if (isOpen) {\n//             document.body.style.overflow = 'hidden';\n//             requestAnimationFrame(() => {\n//                 setIsVisible(true);\n//             });\n//         } else {\n//             setIsVisible(false);\n//             document.body.style.overflow = 'auto';\n//         }\n\n//         return () => {\n//             document.body.style.overflow = 'auto';\n//         };\n//     }, [isOpen]);\n\n//     // Close modal on escape key\n//     useEffect(() => {\n//         const handleEsc = (event) => {\n//             if (event.keyCode === 27) onClose();\n//         };\n//         window.addEventListener('keydown', handleEsc);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleEsc);\n//         };\n//     }, [onClose]);\n\n//     const handleLogin = (e) => {\n//         e.preventDefault();\n//         setFormError('');\n//         setIsLoading(true);\n\n//         // Simulate login request\n//         setTimeout(() => {\n//             if (email.includes('@') && password.length >= 6) {\n//                 // Success - would actually redirect in real app\n//                 onClose();\n//             } else {\n//                 setFormError('Invalid email or password. Please try again.');\n//             }\n//             setIsLoading(false);\n//         }, 1500);\n//     };\n\n//     return (\n//         <div className={`login-modal-overlay ${isOpen ? 'active' : ''} ${isVisible ? 'visible' : ''}`} onClick={onClose}>\n//             <div className=\"login-modal\" onClick={e => e.stopPropagation()}>\n//                 <button className=\"modal-close-btn\" onClick={onClose} aria-label=\"Close login modal\">\n//                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                         <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n//                     </svg>\n//                 </button>\n\n//                 <div className=\"login-modal-content\">\n//                     <div className=\"login-form-container\">\n//                         <div className=\"login-header\">\n//                             <div className=\"login-user-icon\">\n//                                 {isStudent ? (\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M12 3L1 9l4 2.18v6L12 21l7-3.82v-6l2-1.09V17h2V9L12 3zm6.82 6L12 12.72 5.18 9 12 5.28 18.82 9zM17 15.99l-5 2.73-5-2.73v-3.72L12 15l5-2.73v3.72z\"/>\n//                                     </svg>\n//                                 ) : (\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82zM12 3L1 9l11 6 9-4.91V17h2V9L12 3z\"/>\n//                                     </svg>\n//                                 )}\n//                             </div>\n//                             <h2>{isStudent ? 'Student Portal' : 'Faculty Portal'}</h2>\n//                             <p>Sign in with your credentials</p>\n//                         </div>\n\n//                         <div className=\"login-tabs\">\n//                             <button \n//                                 className={`login-tab ${isStudent ? 'active' : ''}`} \n//                                 onClick={() => setIsStudent(true)}\n//                             >\n//                                 Student\n//                             </button>\n//                             <button \n//                                 className={`login-tab ${!isStudent ? 'active' : ''}`} \n//                                 onClick={() => setIsStudent(false)}\n//                             >\n//                                 Faculty\n//                             </button>\n//                             <div className=\"tab-indicator\" style={{ left: isStudent ? '0' : '50%' }}></div>\n//                         </div>\n\n//                         {formError && (\n//                             <div className=\"form-error\">\n//                                 <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                     <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\n//                                 </svg>\n//                                 {formError}\n//                             </div>\n//                         )}\n\n//                         <form className=\"login-form\" onSubmit={handleLogin}>\n//                             <div className=\"form-floating\">\n//                                 <input\n//                                     type=\"email\"\n//                                     id=\"email\"\n//                                     placeholder=\" \"\n//                                     value={email}\n//                                     onChange={(e) => setEmail(e.target.value)}\n//                                     required\n//                                     className=\"form-input\"\n//                                 />\n//                                 <label htmlFor=\"email\" className=\"form-label\">Email Address</label>\n//                                 <div className=\"input-icon\">\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"/>\n//                                     </svg>\n//                                 </div>\n//                             </div>\n\n//                             <div className=\"form-floating\">\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"password\"\n//                                     placeholder=\" \"\n//                                     value={password}\n//                                     onChange={(e) => setPassword(e.target.value)}\n//                                     required\n//                                     className=\"form-input\"\n//                                 />\n//                                 <label htmlFor=\"password\" className=\"form-label\">Password</label>\n//                                 <div className=\"input-icon\">\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/>\n//                                     </svg>\n//                                 </div>\n//                             </div>\n\n//                             <div className=\"form-options\">\n//                                 <div className=\"checkbox-wrapper\">\n//                                     <input\n//                                         type=\"checkbox\"\n//                                         id=\"remember\"\n//                                         checked={rememberMe}\n//                                         onChange={() => setRememberMe(!rememberMe)}\n//                                         className=\"custom-checkbox\"\n//                                     />\n//                                     <label htmlFor=\"remember\" className=\"checkbox-label\">\n//                                         <span className=\"checkbox-custom\"></span>\n//                                         Remember me\n//                                     </label>\n//                                 </div>\n//                                 <a href=\"#\" className=\"forgot-password\">Forgot password?</a>\n//                             </div>\n\n//                             <button \n//                                 type=\"submit\" \n//                                 className={`login-button ${isLoading ? 'loading' : ''}`}\n//                                 disabled={isLoading}\n//                             >\n//                                 {isLoading ? (\n//                                     <span className=\"button-loader\"></span>\n//                                 ) : (\n//                                     <>\n//                                         <span>Sign In</span>\n//                                         <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                             <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\n//                                         </svg>\n//                                     </>\n//                                 )}\n//                             </button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default LoginModal","map":{"version":3,"names":[],"sources":["C:/forum-academy-mern/client/src/components/LoginModal.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import '../styles/LoginModal.css';\n\n// const LoginModal = ({ isOpen, onClose }) => {\n//     const [isStudent, setIsStudent] = useState(true);\n//     const [email, setEmail] = useState('');\n//     const [password, setPassword] = useState('');\n//     const [rememberMe, setRememberMe] = useState(false);\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [formError, setFormError] = useState('');\n    \n//     // Handle animation timing for modal appearance\n//     useEffect(() => {\n//         if (isOpen) {\n//             document.body.style.overflow = 'hidden';\n//             requestAnimationFrame(() => {\n//                 setIsVisible(true);\n//             });\n//         } else {\n//             setIsVisible(false);\n//             document.body.style.overflow = 'auto';\n//         }\n        \n//         return () => {\n//             document.body.style.overflow = 'auto';\n//         };\n//     }, [isOpen]);\n\n//     // Close modal on escape key\n//     useEffect(() => {\n//         const handleEsc = (event) => {\n//             if (event.keyCode === 27) onClose();\n//         };\n//         window.addEventListener('keydown', handleEsc);\n        \n//         return () => {\n//             window.removeEventListener('keydown', handleEsc);\n//         };\n//     }, [onClose]);\n\n//     const handleLogin = (e) => {\n//         e.preventDefault();\n//         setFormError('');\n//         setIsLoading(true);\n        \n//         // Simulate login request\n//         setTimeout(() => {\n//             if (email.includes('@') && password.length >= 6) {\n//                 // Success - would actually redirect in real app\n//                 onClose();\n//             } else {\n//                 setFormError('Invalid email or password. Please try again.');\n//             }\n//             setIsLoading(false);\n//         }, 1500);\n//     };\n\n//     return (\n//         <div className={`login-modal-overlay ${isOpen ? 'active' : ''} ${isVisible ? 'visible' : ''}`} onClick={onClose}>\n//             <div className=\"login-modal\" onClick={e => e.stopPropagation()}>\n//                 <button className=\"modal-close-btn\" onClick={onClose} aria-label=\"Close login modal\">\n//                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                         <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n//                     </svg>\n//                 </button>\n                \n//                 <div className=\"login-modal-content\">\n//                     <div className=\"login-form-container\">\n//                         <div className=\"login-header\">\n//                             <div className=\"login-user-icon\">\n//                                 {isStudent ? (\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M12 3L1 9l4 2.18v6L12 21l7-3.82v-6l2-1.09V17h2V9L12 3zm6.82 6L12 12.72 5.18 9 12 5.28 18.82 9zM17 15.99l-5 2.73-5-2.73v-3.72L12 15l5-2.73v3.72z\"/>\n//                                     </svg>\n//                                 ) : (\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M5 13.18v4L12 21l7-3.82v-4L12 17l-7-3.82zM12 3L1 9l11 6 9-4.91V17h2V9L12 3z\"/>\n//                                     </svg>\n//                                 )}\n//                             </div>\n//                             <h2>{isStudent ? 'Student Portal' : 'Faculty Portal'}</h2>\n//                             <p>Sign in with your credentials</p>\n//                         </div>\n                        \n//                         <div className=\"login-tabs\">\n//                             <button \n//                                 className={`login-tab ${isStudent ? 'active' : ''}`} \n//                                 onClick={() => setIsStudent(true)}\n//                             >\n//                                 Student\n//                             </button>\n//                             <button \n//                                 className={`login-tab ${!isStudent ? 'active' : ''}`} \n//                                 onClick={() => setIsStudent(false)}\n//                             >\n//                                 Faculty\n//                             </button>\n//                             <div className=\"tab-indicator\" style={{ left: isStudent ? '0' : '50%' }}></div>\n//                         </div>\n                        \n//                         {formError && (\n//                             <div className=\"form-error\">\n//                                 <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                     <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\n//                                 </svg>\n//                                 {formError}\n//                             </div>\n//                         )}\n                        \n//                         <form className=\"login-form\" onSubmit={handleLogin}>\n//                             <div className=\"form-floating\">\n//                                 <input\n//                                     type=\"email\"\n//                                     id=\"email\"\n//                                     placeholder=\" \"\n//                                     value={email}\n//                                     onChange={(e) => setEmail(e.target.value)}\n//                                     required\n//                                     className=\"form-input\"\n//                                 />\n//                                 <label htmlFor=\"email\" className=\"form-label\">Email Address</label>\n//                                 <div className=\"input-icon\">\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"/>\n//                                     </svg>\n//                                 </div>\n//                             </div>\n                            \n//                             <div className=\"form-floating\">\n//                                 <input\n//                                     type=\"password\"\n//                                     id=\"password\"\n//                                     placeholder=\" \"\n//                                     value={password}\n//                                     onChange={(e) => setPassword(e.target.value)}\n//                                     required\n//                                     className=\"form-input\"\n//                                 />\n//                                 <label htmlFor=\"password\" className=\"form-label\">Password</label>\n//                                 <div className=\"input-icon\">\n//                                     <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                         <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/>\n//                                     </svg>\n//                                 </div>\n//                             </div>\n                            \n//                             <div className=\"form-options\">\n//                                 <div className=\"checkbox-wrapper\">\n//                                     <input\n//                                         type=\"checkbox\"\n//                                         id=\"remember\"\n//                                         checked={rememberMe}\n//                                         onChange={() => setRememberMe(!rememberMe)}\n//                                         className=\"custom-checkbox\"\n//                                     />\n//                                     <label htmlFor=\"remember\" className=\"checkbox-label\">\n//                                         <span className=\"checkbox-custom\"></span>\n//                                         Remember me\n//                                     </label>\n//                                 </div>\n//                                 <a href=\"#\" className=\"forgot-password\">Forgot password?</a>\n//                             </div>\n                            \n//                             <button \n//                                 type=\"submit\" \n//                                 className={`login-button ${isLoading ? 'loading' : ''}`}\n//                                 disabled={isLoading}\n//                             >\n//                                 {isLoading ? (\n//                                     <span className=\"button-loader\"></span>\n//                                 ) : (\n//                                     <>\n//                                         <span>Sign In</span>\n//                                         <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n//                                             <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\n//                                         </svg>\n//                                     </>\n//                                 )}\n//                             </button>\n//                         </form>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default LoginModal"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}