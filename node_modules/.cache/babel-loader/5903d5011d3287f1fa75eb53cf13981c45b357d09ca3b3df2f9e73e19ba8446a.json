{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import '../styles/StatsSection.css'; // Assuming you have a CSS file for styling\n\n// const StatsSection = () => {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const sectionRef = useRef(null);\n\n//     const statsData = [\n//         {\n//             value: 95,\n//             suffix: '%',\n//             label: 'Job Placement Rate',\n//             icon: 'fa-solid fa-briefcase'\n//         },\n//         {\n//             value: 50,\n//             suffix: '+',\n//             label: 'Industry Partners',\n//             icon: 'fa-solid fa-handshake'\n//         },\n//         {\n//             value: 15,\n//             suffix: '+',\n//             label: 'Specialized Programs',\n//             icon: 'fa-solid fa-graduation-cap'\n//         },\n//         {\n//             value: 2000,\n//             suffix: '+',\n//             label: 'Graduates',\n//             icon: 'fa-solid fa-user-graduate'\n//         }\n//     ];\n\n//     // Counter animation\n//     const [counters, setCounters] = useState(statsData.map(() => 0));\n\n//     // Intersection Observer to trigger counter animation when section is visible\n//     useEffect(() => {\n//         const observer = new IntersectionObserver((entries) => {\n//             if (entries[0].isIntersecting) {\n//                 setIsVisible(true);\n//             }\n//         }, { threshold: 0.3 });\n\n//         if (sectionRef.current) {\n//             observer.observe(sectionRef.current);\n//         }\n\n//         return () => {\n//             if (sectionRef.current) {\n//                 observer.unobserve(sectionRef.current);\n//             }\n//         };\n//     }, []);\n\n//     // Animate counters when section becomes visible\n//     useEffect(() => {\n//         if (!isVisible) return;\n\n//         statsData.forEach((stat, index) => {\n//             const duration = 2000; // 2 seconds for animation\n//             const interval = 20; // update every 20ms\n//             const steps = duration / interval;\n//             const increment = stat.value / steps;\n//             let count = 0;\n//             let currentCount = 0;\n\n//             const timer = setInterval(() => {\n//                 count++;\n//                 currentCount += increment;\n\n//                 if (count >= steps) {\n//                     clearInterval(timer);\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = stat.value;\n//                         return newCounters;\n//                     });\n//                 } else {\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = Math.round(currentCount);\n//                         return newCounters;\n//                     });\n//                 }\n//             }, interval);\n\n//             return () => clearInterval(timer);\n//         });\n//     }, [isVisible, statsData]);\n\n//     return (\n//         <section className=\"stats-section\" ref={sectionRef}>\n//             <div className=\"stats-bg-pattern\"></div>\n//             <div className=\"stats-overlay\"></div>\n//             <div className=\"container\">\n//                 <div className=\"stats-header\">\n//                     <h2>Our Impact in Numbers</h2>\n//                     <p>Driving education excellence through measurable outcomes</p>\n//                 </div>\n//                 <div className=\"stats-grid\">\n//                     {statsData.map((stat, index) => (\n//                         <div \n//                             className=\"stat-item\" \n//                             key={index} \n//                             data-aos=\"fade-up\" \n//                             data-aos-delay={index * 100}\n//                         >\n//                             <div className=\"stat-icon\">\n//                                 <i className={stat.icon}></i>\n//                             </div>\n//                             <div className=\"stat-value\">\n//                                 <span className=\"counter\">{counters[index]}</span>\n//                                 <span className=\"suffix\">{stat.suffix}</span>\n//                             </div>\n//                             <p className=\"stat-label\">{stat.label}</p>\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n//         </section>\n//     );\n// };\n\n// export default StatsSection;","map":{"version":3,"names":[],"sources":["C:/forum-academy-mern/client/src/components/StatsSection.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import '../styles/StatsSection.css'; // Assuming you have a CSS file for styling\n\n// const StatsSection = () => {\n//     const [isVisible, setIsVisible] = useState(false);\n//     const sectionRef = useRef(null);\n    \n//     const statsData = [\n//         {\n//             value: 95,\n//             suffix: '%',\n//             label: 'Job Placement Rate',\n//             icon: 'fa-solid fa-briefcase'\n//         },\n//         {\n//             value: 50,\n//             suffix: '+',\n//             label: 'Industry Partners',\n//             icon: 'fa-solid fa-handshake'\n//         },\n//         {\n//             value: 15,\n//             suffix: '+',\n//             label: 'Specialized Programs',\n//             icon: 'fa-solid fa-graduation-cap'\n//         },\n//         {\n//             value: 2000,\n//             suffix: '+',\n//             label: 'Graduates',\n//             icon: 'fa-solid fa-user-graduate'\n//         }\n//     ];\n\n//     // Counter animation\n//     const [counters, setCounters] = useState(statsData.map(() => 0));\n\n//     // Intersection Observer to trigger counter animation when section is visible\n//     useEffect(() => {\n//         const observer = new IntersectionObserver((entries) => {\n//             if (entries[0].isIntersecting) {\n//                 setIsVisible(true);\n//             }\n//         }, { threshold: 0.3 });\n        \n//         if (sectionRef.current) {\n//             observer.observe(sectionRef.current);\n//         }\n        \n//         return () => {\n//             if (sectionRef.current) {\n//                 observer.unobserve(sectionRef.current);\n//             }\n//         };\n//     }, []);\n\n//     // Animate counters when section becomes visible\n//     useEffect(() => {\n//         if (!isVisible) return;\n        \n//         statsData.forEach((stat, index) => {\n//             const duration = 2000; // 2 seconds for animation\n//             const interval = 20; // update every 20ms\n//             const steps = duration / interval;\n//             const increment = stat.value / steps;\n//             let count = 0;\n//             let currentCount = 0;\n            \n//             const timer = setInterval(() => {\n//                 count++;\n//                 currentCount += increment;\n                \n//                 if (count >= steps) {\n//                     clearInterval(timer);\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = stat.value;\n//                         return newCounters;\n//                     });\n//                 } else {\n//                     setCounters(prev => {\n//                         const newCounters = [...prev];\n//                         newCounters[index] = Math.round(currentCount);\n//                         return newCounters;\n//                     });\n//                 }\n//             }, interval);\n            \n//             return () => clearInterval(timer);\n//         });\n//     }, [isVisible, statsData]);\n\n//     return (\n//         <section className=\"stats-section\" ref={sectionRef}>\n//             <div className=\"stats-bg-pattern\"></div>\n//             <div className=\"stats-overlay\"></div>\n//             <div className=\"container\">\n//                 <div className=\"stats-header\">\n//                     <h2>Our Impact in Numbers</h2>\n//                     <p>Driving education excellence through measurable outcomes</p>\n//                 </div>\n//                 <div className=\"stats-grid\">\n//                     {statsData.map((stat, index) => (\n//                         <div \n//                             className=\"stat-item\" \n//                             key={index} \n//                             data-aos=\"fade-up\" \n//                             data-aos-delay={index * 100}\n//                         >\n//                             <div className=\"stat-icon\">\n//                                 <i className={stat.icon}></i>\n//                             </div>\n//                             <div className=\"stat-value\">\n//                                 <span className=\"counter\">{counters[index]}</span>\n//                                 <span className=\"suffix\">{stat.suffix}</span>\n//                             </div>\n//                             <p className=\"stat-label\">{stat.label}</p>\n//                         </div>\n//                     ))}\n//                 </div>\n//             </div>\n//         </section>\n//     );\n// };\n\n// export default StatsSection;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}