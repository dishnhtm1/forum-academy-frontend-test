{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN-FIA-PORTAL\\\\client\\\\src\\\\components\\\\Three.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n\n// const ThreeJSBackground = () => {\n//     const containerRef = useRef(null);\n\n//     useEffect(() => {\n//         // Initialize Three.js scene\n//         const scene = new THREE.Scene();\n//         const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//         const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n\n//         renderer.setSize(window.innerWidth, window.innerHeight);\n//         renderer.setPixelRatio(window.devicePixelRatio);\n\n//         if (containerRef.current) {\n//             containerRef.current.appendChild(renderer.domElement);\n//         }\n\n//         // Add ambient light\n//         const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n//         scene.add(ambientLight);\n\n//         // Add directional light\n//         const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n//         directionalLight.position.set(10, 10, 10);\n//         scene.add(directionalLight);\n\n//         // Create particles\n//         const particlesGeometry = new THREE.BufferGeometry();\n//         const particlesCount = 2000;\n\n//         const posArray = new Float32Array(particlesCount * 3);\n//         const colorsArray = new Float32Array(particlesCount * 3);\n\n//         for (let i = 0; i < particlesCount * 3; i += 3) {\n//             // Position\n//             posArray[i] = (Math.random() - 0.5) * 20;\n//             posArray[i + 1] = (Math.random() - 0.5) * 20;\n//             posArray[i + 2] = (Math.random() - 0.5) * 20;\n\n//             // Colors - blue theme\n//             colorsArray[i] = Math.random() * 0.5 + 0.5;      // R (blue-ish)\n//             colorsArray[i + 1] = Math.random() * 0.5 + 0.5;  // G (blue-ish)\n//             colorsArray[i + 2] = Math.random() + 0.5;        // B (strong blue)\n//         }\n\n//         particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n//         particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArray, 3));\n\n//         const particlesMaterial = new THREE.PointsMaterial({\n//             size: 0.05,\n//             vertexColors: true,\n//             transparent: true,\n//             opacity: 0.8\n//         });\n\n//         const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n//         scene.add(particlesMesh);\n\n//         // Create geometry objects\n//         const geometryObjects = [];\n\n//         // Add some spheres\n//         for (let i = 0; i < 10; i++) {\n//             const geometry = new THREE.SphereGeometry(Math.random() * 0.8 + 0.2, 32, 32);\n//             const material = new THREE.MeshPhongMaterial({\n//                 color: new THREE.Color(\n//                     Math.random() * 0.5 + 0.5,\n//                     Math.random() * 0.5 + 0.5,\n//                     Math.random() + 0.5\n//                 ),\n//                 transparent: true,\n//                 opacity: 0.8\n//             });\n//             const mesh = new THREE.Mesh(geometry, material);\n\n//             mesh.position.x = (Math.random() - 0.5) * 15;\n//             mesh.position.y = (Math.random() - 0.5) * 15;\n//             mesh.position.z = (Math.random() - 0.5) * 15;\n\n//             mesh.rotation.x = Math.random() * Math.PI;\n//             mesh.rotation.y = Math.random() * Math.PI;\n\n//             mesh.speed = {\n//                 rotation: {\n//                     x: (Math.random() - 0.5) * 0.005,\n//                     y: (Math.random() - 0.5) * 0.005,\n//                     z: (Math.random() - 0.5) * 0.005\n//                 }\n//             };\n\n//             scene.add(mesh);\n//             geometryObjects.push(mesh);\n//         }\n\n//         // Add some torus knots\n//         for (let i = 0; i < 5; i++) {\n//             const geometry = new THREE.TorusKnotGeometry(\n//                 Math.random() * 0.5 + 0.5,\n//                 0.2,\n//                 64,\n//                 8\n//             );\n//             const material = new THREE.MeshPhongMaterial({\n//                 color: new THREE.Color(\n//                     Math.random() * 0.5 + 0.5,\n//                     Math.random() * 0.5 + 0.5,\n//                     Math.random() + 0.5\n//                 ),\n//                 transparent: true,\n//                 opacity: 0.7\n//             });\n//             const mesh = new THREE.Mesh(geometry, material);\n\n//             mesh.position.x = (Math.random() - 0.5) * 15;\n//             mesh.position.y = (Math.random() - 0.5) * 15;\n//             mesh.position.z = (Math.random() - 0.5) * 15;\n\n//             mesh.rotation.x = Math.random() * Math.PI;\n//             mesh.rotation.y = Math.random() * Math.PI;\n\n//             mesh.speed = {\n//                 rotation: {\n//                     x: (Math.random() - 0.5) * 0.005,\n//                     y: (Math.random() - 0.5) * 0.005,\n//                     z: (Math.random() - 0.5) * 0.005\n//                 }\n//             };\n\n//             scene.add(mesh);\n//             geometryObjects.push(mesh);\n//         }\n\n//         // Initial camera position\n//         camera.position.z = 5;\n\n//         // Variables for animation\n//         let scrollPercent = 0;\n//         let rotationSpeed = 0.001;\n\n//         // Handle scroll events\n//         const handleScroll = () => {\n//             // Calculate scroll percentage\n//             const h = document.documentElement;\n//             const b = document.body;\n//             const st = 'scrollTop';\n//             const sh = 'scrollHeight';\n\n//             scrollPercent = (h[st]||b[st]) / ((h[sh]||b[sh]) - h.clientHeight);\n//         };\n\n//         window.addEventListener('scroll', handleScroll);\n\n//         // Handle window resize\n//         const handleResize = () => {\n//             camera.aspect = window.innerWidth / window.innerHeight;\n//             camera.updateProjectionMatrix();\n//             renderer.setSize(window.innerWidth, window.innerHeight);\n//         };\n\n//         window.addEventListener('resize', handleResize);\n\n//         // Animation loop\n//         const animate = () => {\n//             requestAnimationFrame(animate);\n\n//             // Rotate the particle system\n//             particlesMesh.rotation.x += rotationSpeed * 0.5;\n//             particlesMesh.rotation.y += rotationSpeed * 0.2;\n\n//             // Update geometric objects\n//             geometryObjects.forEach(obj => {\n//                 obj.rotation.x += obj.speed.rotation.x;\n//                 obj.rotation.y += obj.speed.rotation.y;\n//                 obj.rotation.z += obj.speed.rotation.z;\n//             });\n\n//             // Update camera based on scroll\n//             camera.position.z = 5 + scrollPercent * 15;\n//             camera.position.y = scrollPercent * 2;\n//             camera.rotation.x = -scrollPercent * 0.5;\n\n//             // Render the scene\n//             renderer.render(scene, camera);\n//         };\n\n//         animate();\n\n//         // Cleanup function\n//         return () => {\n//             window.removeEventListener('scroll', handleScroll);\n//             window.removeEventListener('resize', handleResize);\n\n//             // Remove renderer from DOM\n//             if (containerRef.current && containerRef.current.contains(renderer.domElement)) {\n//                 containerRef.current.removeChild(renderer.domElement);\n//             }\n\n//             // Dispose geometries and materials to prevent memory leaks\n//             particlesGeometry.dispose();\n//             particlesMaterial.dispose();\n\n//             geometryObjects.forEach(obj => {\n//                 obj.geometry.dispose();\n//                 obj.material.dispose();\n//                 scene.remove(obj);\n//             });\n\n//             scene.remove(particlesMesh);\n//             renderer.dispose();\n//         };\n//     }, []);\n\n//     return <div ref={containerRef} id=\"canvas-container\" />;\n// };\n\n// export default ThreeJSBackground;\n\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShaderGradient = () => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const loadShaderGradient = async () => {\n      try {\n        // Check if window and document are available (we're in the browser)\n        if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n          // Create a script element to load the shader gradient library\n          const script = document.createElement(\"script\");\n          script.src = \"https://unpkg.com/@shadergradient/html@latest/index.js\";\n          script.async = true;\n\n          // When script loads, create the shader gradient element\n          script.onload = () => {\n            if (containerRef.current) {\n              // Create the shader-gradient element\n              const gradientElement = document.createElement(\"shader-gradient\");\n\n              // Set attributes based on your shadergradient.co URL parameters\n              gradientElement.setAttribute(\"animate\", \"on\");\n              gradientElement.setAttribute(\"axes-helper\", \"off\");\n              gradientElement.setAttribute(\"brightness\", \"1.2\");\n              gradientElement.setAttribute(\"c-azimuth-angle\", \"180\");\n              gradientElement.setAttribute(\"c-distance\", \"3.6\");\n              gradientElement.setAttribute(\"c-polar-angle\", \"90\");\n              gradientElement.setAttribute(\"camera-zoom\", \"1\");\n              gradientElement.setAttribute(\"color-1\", \"#ff5005\");\n              gradientElement.setAttribute(\"color-2\", \"#dbba95\");\n              gradientElement.setAttribute(\"color-3\", \"#d0bce1\");\n              gradientElement.setAttribute(\"destination\", \"onCanvas\");\n              gradientElement.setAttribute(\"embed-mode\", \"off\");\n              gradientElement.setAttribute(\"env-preset\", \"city\");\n              gradientElement.setAttribute(\"grain\", \"on\");\n              gradientElement.setAttribute(\"light-type\", \"3d\");\n              gradientElement.setAttribute(\"position-x\", \"-1.4\");\n              gradientElement.setAttribute(\"position-y\", \"0\");\n              gradientElement.setAttribute(\"position-z\", \"0\");\n              gradientElement.setAttribute(\"range\", \"enabled\");\n              gradientElement.setAttribute(\"range-end\", \"40\");\n              gradientElement.setAttribute(\"range-start\", \"0\");\n              gradientElement.setAttribute(\"reflection\", \"0.1\");\n              gradientElement.setAttribute(\"rotation-x\", \"0\");\n              gradientElement.setAttribute(\"rotation-y\", \"10\");\n              gradientElement.setAttribute(\"rotation-z\", \"50\");\n              gradientElement.setAttribute(\"shader\", \"defaults\");\n              gradientElement.setAttribute(\"type\", \"plane\");\n              gradientElement.setAttribute(\"u-density\", \"1.3\");\n              gradientElement.setAttribute(\"u-frequency\", \"5.5\");\n              gradientElement.setAttribute(\"u-speed\", \"0.4\");\n              gradientElement.setAttribute(\"u-strength\", \"4\");\n              gradientElement.setAttribute(\"u-time\", \"0\");\n              gradientElement.setAttribute(\"wireframe\", \"false\");\n\n              // Set style to fill the container\n              gradientElement.style.width = \"100%\";\n              gradientElement.style.height = \"100%\";\n              gradientElement.style.position = \"absolute\";\n              gradientElement.style.top = \"0\";\n              gradientElement.style.left = \"0\";\n\n              // Clear container and append the gradient element\n              containerRef.current.innerHTML = \"\";\n              containerRef.current.appendChild(gradientElement);\n            }\n          };\n          document.body.appendChild(script);\n\n          // Clean up function\n          return () => {\n            if (document.body.contains(script)) {\n              document.body.removeChild(script);\n            }\n          };\n        }\n      } catch (error) {\n        console.error(\"Error loading shader gradient:\", error);\n      }\n    };\n    loadShaderGradient();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    id: \"shader-gradient-container\",\n    style: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100vh\",\n      zIndex: -1,\n      overflow: \"hidden\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 9\n  }, this);\n};\n_s(ShaderGradient, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ShaderGradient;\nexport default ShaderGradient;\nvar _c;\n$RefreshReg$(_c, \"ShaderGradient\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ShaderGradient","_s","containerRef","loadShaderGradient","window","document","script","createElement","src","async","onload","current","gradientElement","setAttribute","style","width","height","position","top","left","innerHTML","appendChild","body","contains","removeChild","error","console","ref","id","zIndex","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN-FIA-PORTAL/client/src/components/Three.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\r\n// import * as THREE from 'three';\r\n\r\n// const ThreeJSBackground = () => {\r\n//     const containerRef = useRef(null);\r\n\r\n//     useEffect(() => {\r\n//         // Initialize Three.js scene\r\n//         const scene = new THREE.Scene();\r\n//         const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n//         const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n\r\n//         renderer.setSize(window.innerWidth, window.innerHeight);\r\n//         renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n//         if (containerRef.current) {\r\n//             containerRef.current.appendChild(renderer.domElement);\r\n//         }\r\n\r\n//         // Add ambient light\r\n//         const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n//         scene.add(ambientLight);\r\n\r\n//         // Add directional light\r\n//         const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n//         directionalLight.position.set(10, 10, 10);\r\n//         scene.add(directionalLight);\r\n\r\n//         // Create particles\r\n//         const particlesGeometry = new THREE.BufferGeometry();\r\n//         const particlesCount = 2000;\r\n\r\n//         const posArray = new Float32Array(particlesCount * 3);\r\n//         const colorsArray = new Float32Array(particlesCount * 3);\r\n\r\n//         for (let i = 0; i < particlesCount * 3; i += 3) {\r\n//             // Position\r\n//             posArray[i] = (Math.random() - 0.5) * 20;\r\n//             posArray[i + 1] = (Math.random() - 0.5) * 20;\r\n//             posArray[i + 2] = (Math.random() - 0.5) * 20;\r\n\r\n//             // Colors - blue theme\r\n//             colorsArray[i] = Math.random() * 0.5 + 0.5;      // R (blue-ish)\r\n//             colorsArray[i + 1] = Math.random() * 0.5 + 0.5;  // G (blue-ish)\r\n//             colorsArray[i + 2] = Math.random() + 0.5;        // B (strong blue)\r\n//         }\r\n\r\n//         particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\r\n//         particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colorsArray, 3));\r\n\r\n//         const particlesMaterial = new THREE.PointsMaterial({\r\n//             size: 0.05,\r\n//             vertexColors: true,\r\n//             transparent: true,\r\n//             opacity: 0.8\r\n//         });\r\n\r\n//         const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\r\n//         scene.add(particlesMesh);\r\n\r\n//         // Create geometry objects\r\n//         const geometryObjects = [];\r\n\r\n//         // Add some spheres\r\n//         for (let i = 0; i < 10; i++) {\r\n//             const geometry = new THREE.SphereGeometry(Math.random() * 0.8 + 0.2, 32, 32);\r\n//             const material = new THREE.MeshPhongMaterial({\r\n//                 color: new THREE.Color(\r\n//                     Math.random() * 0.5 + 0.5,\r\n//                     Math.random() * 0.5 + 0.5,\r\n//                     Math.random() + 0.5\r\n//                 ),\r\n//                 transparent: true,\r\n//                 opacity: 0.8\r\n//             });\r\n//             const mesh = new THREE.Mesh(geometry, material);\r\n\r\n//             mesh.position.x = (Math.random() - 0.5) * 15;\r\n//             mesh.position.y = (Math.random() - 0.5) * 15;\r\n//             mesh.position.z = (Math.random() - 0.5) * 15;\r\n\r\n//             mesh.rotation.x = Math.random() * Math.PI;\r\n//             mesh.rotation.y = Math.random() * Math.PI;\r\n\r\n//             mesh.speed = {\r\n//                 rotation: {\r\n//                     x: (Math.random() - 0.5) * 0.005,\r\n//                     y: (Math.random() - 0.5) * 0.005,\r\n//                     z: (Math.random() - 0.5) * 0.005\r\n//                 }\r\n//             };\r\n\r\n//             scene.add(mesh);\r\n//             geometryObjects.push(mesh);\r\n//         }\r\n\r\n//         // Add some torus knots\r\n//         for (let i = 0; i < 5; i++) {\r\n//             const geometry = new THREE.TorusKnotGeometry(\r\n//                 Math.random() * 0.5 + 0.5,\r\n//                 0.2,\r\n//                 64,\r\n//                 8\r\n//             );\r\n//             const material = new THREE.MeshPhongMaterial({\r\n//                 color: new THREE.Color(\r\n//                     Math.random() * 0.5 + 0.5,\r\n//                     Math.random() * 0.5 + 0.5,\r\n//                     Math.random() + 0.5\r\n//                 ),\r\n//                 transparent: true,\r\n//                 opacity: 0.7\r\n//             });\r\n//             const mesh = new THREE.Mesh(geometry, material);\r\n\r\n//             mesh.position.x = (Math.random() - 0.5) * 15;\r\n//             mesh.position.y = (Math.random() - 0.5) * 15;\r\n//             mesh.position.z = (Math.random() - 0.5) * 15;\r\n\r\n//             mesh.rotation.x = Math.random() * Math.PI;\r\n//             mesh.rotation.y = Math.random() * Math.PI;\r\n\r\n//             mesh.speed = {\r\n//                 rotation: {\r\n//                     x: (Math.random() - 0.5) * 0.005,\r\n//                     y: (Math.random() - 0.5) * 0.005,\r\n//                     z: (Math.random() - 0.5) * 0.005\r\n//                 }\r\n//             };\r\n\r\n//             scene.add(mesh);\r\n//             geometryObjects.push(mesh);\r\n//         }\r\n\r\n//         // Initial camera position\r\n//         camera.position.z = 5;\r\n\r\n//         // Variables for animation\r\n//         let scrollPercent = 0;\r\n//         let rotationSpeed = 0.001;\r\n\r\n//         // Handle scroll events\r\n//         const handleScroll = () => {\r\n//             // Calculate scroll percentage\r\n//             const h = document.documentElement;\r\n//             const b = document.body;\r\n//             const st = 'scrollTop';\r\n//             const sh = 'scrollHeight';\r\n\r\n//             scrollPercent = (h[st]||b[st]) / ((h[sh]||b[sh]) - h.clientHeight);\r\n//         };\r\n\r\n//         window.addEventListener('scroll', handleScroll);\r\n\r\n//         // Handle window resize\r\n//         const handleResize = () => {\r\n//             camera.aspect = window.innerWidth / window.innerHeight;\r\n//             camera.updateProjectionMatrix();\r\n//             renderer.setSize(window.innerWidth, window.innerHeight);\r\n//         };\r\n\r\n//         window.addEventListener('resize', handleResize);\r\n\r\n//         // Animation loop\r\n//         const animate = () => {\r\n//             requestAnimationFrame(animate);\r\n\r\n//             // Rotate the particle system\r\n//             particlesMesh.rotation.x += rotationSpeed * 0.5;\r\n//             particlesMesh.rotation.y += rotationSpeed * 0.2;\r\n\r\n//             // Update geometric objects\r\n//             geometryObjects.forEach(obj => {\r\n//                 obj.rotation.x += obj.speed.rotation.x;\r\n//                 obj.rotation.y += obj.speed.rotation.y;\r\n//                 obj.rotation.z += obj.speed.rotation.z;\r\n//             });\r\n\r\n//             // Update camera based on scroll\r\n//             camera.position.z = 5 + scrollPercent * 15;\r\n//             camera.position.y = scrollPercent * 2;\r\n//             camera.rotation.x = -scrollPercent * 0.5;\r\n\r\n//             // Render the scene\r\n//             renderer.render(scene, camera);\r\n//         };\r\n\r\n//         animate();\r\n\r\n//         // Cleanup function\r\n//         return () => {\r\n//             window.removeEventListener('scroll', handleScroll);\r\n//             window.removeEventListener('resize', handleResize);\r\n\r\n//             // Remove renderer from DOM\r\n//             if (containerRef.current && containerRef.current.contains(renderer.domElement)) {\r\n//                 containerRef.current.removeChild(renderer.domElement);\r\n//             }\r\n\r\n//             // Dispose geometries and materials to prevent memory leaks\r\n//             particlesGeometry.dispose();\r\n//             particlesMaterial.dispose();\r\n\r\n//             geometryObjects.forEach(obj => {\r\n//                 obj.geometry.dispose();\r\n//                 obj.material.dispose();\r\n//                 scene.remove(obj);\r\n//             });\r\n\r\n//             scene.remove(particlesMesh);\r\n//             renderer.dispose();\r\n//         };\r\n//     }, []);\r\n\r\n//     return <div ref={containerRef} id=\"canvas-container\" />;\r\n// };\r\n\r\n// export default ThreeJSBackground;\r\n\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nconst ShaderGradient = () => {\r\n    const containerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const loadShaderGradient = async () => {\r\n        try {\r\n            // Check if window and document are available (we're in the browser)\r\n            if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\r\n            // Create a script element to load the shader gradient library\r\n            const script = document.createElement(\"script\");\r\n            script.src = \"https://unpkg.com/@shadergradient/html@latest/index.js\";\r\n            script.async = true;\r\n\r\n            // When script loads, create the shader gradient element\r\n            script.onload = () => {\r\n                if (containerRef.current) {\r\n                // Create the shader-gradient element\r\n                const gradientElement = document.createElement(\"shader-gradient\");\r\n\r\n                // Set attributes based on your shadergradient.co URL parameters\r\n                gradientElement.setAttribute(\"animate\", \"on\");\r\n                gradientElement.setAttribute(\"axes-helper\", \"off\");\r\n                gradientElement.setAttribute(\"brightness\", \"1.2\");\r\n                gradientElement.setAttribute(\"c-azimuth-angle\", \"180\");\r\n                gradientElement.setAttribute(\"c-distance\", \"3.6\");\r\n                gradientElement.setAttribute(\"c-polar-angle\", \"90\");\r\n                gradientElement.setAttribute(\"camera-zoom\", \"1\");\r\n                gradientElement.setAttribute(\"color-1\", \"#ff5005\");\r\n                gradientElement.setAttribute(\"color-2\", \"#dbba95\");\r\n                gradientElement.setAttribute(\"color-3\", \"#d0bce1\");\r\n                gradientElement.setAttribute(\"destination\", \"onCanvas\");\r\n                gradientElement.setAttribute(\"embed-mode\", \"off\");\r\n                gradientElement.setAttribute(\"env-preset\", \"city\");\r\n                gradientElement.setAttribute(\"grain\", \"on\");\r\n                gradientElement.setAttribute(\"light-type\", \"3d\");\r\n                gradientElement.setAttribute(\"position-x\", \"-1.4\");\r\n                gradientElement.setAttribute(\"position-y\", \"0\");\r\n                gradientElement.setAttribute(\"position-z\", \"0\");\r\n                gradientElement.setAttribute(\"range\", \"enabled\");\r\n                gradientElement.setAttribute(\"range-end\", \"40\");\r\n                gradientElement.setAttribute(\"range-start\", \"0\");\r\n                gradientElement.setAttribute(\"reflection\", \"0.1\");\r\n                gradientElement.setAttribute(\"rotation-x\", \"0\");\r\n                gradientElement.setAttribute(\"rotation-y\", \"10\");\r\n                gradientElement.setAttribute(\"rotation-z\", \"50\");\r\n                gradientElement.setAttribute(\"shader\", \"defaults\");\r\n                gradientElement.setAttribute(\"type\", \"plane\");\r\n                gradientElement.setAttribute(\"u-density\", \"1.3\");\r\n                gradientElement.setAttribute(\"u-frequency\", \"5.5\");\r\n                gradientElement.setAttribute(\"u-speed\", \"0.4\");\r\n                gradientElement.setAttribute(\"u-strength\", \"4\");\r\n                gradientElement.setAttribute(\"u-time\", \"0\");\r\n                gradientElement.setAttribute(\"wireframe\", \"false\");\r\n\r\n                // Set style to fill the container\r\n                gradientElement.style.width = \"100%\";\r\n                gradientElement.style.height = \"100%\";\r\n                gradientElement.style.position = \"absolute\";\r\n                gradientElement.style.top = \"0\";\r\n                gradientElement.style.left = \"0\";\r\n\r\n                // Clear container and append the gradient element\r\n                containerRef.current.innerHTML = \"\";\r\n                containerRef.current.appendChild(gradientElement);\r\n                }\r\n            };\r\n\r\n            document.body.appendChild(script);\r\n\r\n            // Clean up function\r\n            return () => {\r\n                if (document.body.contains(script)) {\r\n                document.body.removeChild(script);\r\n                }\r\n            };\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error loading shader gradient:\", error);\r\n        }\r\n        };\r\n\r\n        loadShaderGradient();\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n        ref={containerRef}\r\n        id=\"shader-gradient-container\"\r\n        style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100vh\",\r\n            zIndex: -1,\r\n            overflow: \"hidden\",\r\n        }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ShaderGradient;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,YAAY,GAAGL,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACZ,MAAMO,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACA;QACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOC,QA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}