{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN-FIA-PORTAL\\\\client\\\\src\\\\components\\\\ShaderGradient.js\",\n  _s = $RefreshSig$();\n// // src/components/ShaderBackground.tsx\n// import React, { useRef, useEffect } from \"react\";\n// import * as THREE from \"three\";\n// import vertexShader from \"../shaders/vertex.glsl\";\n// import fragmentShader from \"../shaders/fragment.glsl\";\n\n// const ShaderBackground = () => {\n//     const mountRef = useRef<HTMLDivElement>(null);\n\n//     useEffect(() => {\n//         const width = window.innerWidth;\n//         const height = window.innerHeight;\n\n//         const scene = new THREE.Scene();\n//         const camera = new THREE.Camera();\n//         camera.position.z = 1;\n\n//         const renderer = new THREE.WebGLRenderer();\n//         renderer.setSize(width, height);\n//         if (mountRef.current) {\n//             mountRef.current.appendChild(renderer.domElement);\n//         }\n\n//         const uniforms = {\n//         u_time: { value: 0.0 },\n//         u_resolution: { value: new THREE.Vector2(width, height) },\n//         };\n\n//         const material = new THREE.ShaderMaterial({\n//         uniforms,\n//         vertexShader,\n//         fragmentShader,\n//         });\n\n//         const geometry = new THREE.PlaneGeometry(2, 2);\n//         const mesh = new THREE.Mesh(geometry, material);\n//         scene.add(mesh);\n\n//         const animate = () => {\n//         uniforms.u_time.value += 0.05;\n//         renderer.render(scene, camera);\n//         requestAnimationFrame(animate);\n//         };\n\n//         animate();\n//         if (mountRef.current) {\n//             mountRef.current.removeChild(renderer.domElement);\n//         }\n//         return () => {\n//         if (mountRef.current) {\n//             mountRef.current.removeChild(renderer.domElement);\n//         }\n//         };\n//     }, []);\n\n//     return <div ref={mountRef} style={{ position: \"fixed\", top: 0, left: 0, width: \"100%\", height: \"100%\", zIndex: -1 }} />;\n// };\n\n// export default ShaderBackground;\n\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\n\n// Simplified shader code since you may not have separate .glsl files\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexShader = `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n    `;\nconst fragmentShader = `\n    uniform float u_time;\n    uniform vec2 u_resolution;\n    varying vec2 vUv;\n\n    void main() {\n        vec2 st = vUv;\n        vec3 color1 = vec3(0.98, 0.31, 0.02); // #ff5005\n        vec3 color2 = vec3(0.86, 0.73, 0.58); // #dbba95\n        vec3 color3 = vec3(0.82, 0.74, 0.88); // #d0bce1\n        \n        // Create animated gradient\n        float t = u_time * 0.4;\n        vec2 pos = st * 2.0 - 1.0;\n        float d = length(pos) * 1.3;\n        float wave = sin(d * 5.5 - t) * 4.0 * (1.0 - d);\n        wave = max(0.0, wave);\n        \n        // Mix colors\n        vec3 color = mix(color1, color2, st.x);\n        color = mix(color, color3, st.y);\n        color = mix(color, vec3(1.0), wave * 0.3);\n        \n        gl_FragColor = vec4(color, 1.0);\n    }\n`;\nconst ShaderBackground = () => {\n  _s();\n  // Fix 1: Use useRef without TypeScript generic syntax\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    // Only proceed if the ref is attached\n    if (!mountRef.current) return;\n    const scene = new THREE.Scene();\n    const camera = new THREE.Camera();\n    camera.position.z = 1;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(width, height);\n\n    // Fix 2: Use the current property safely\n    mountRef.current.appendChild(renderer.domElement);\n    const uniforms = {\n      u_time: {\n        value: 0.0\n      },\n      u_resolution: {\n        value: new THREE.Vector2(width, height)\n      }\n    };\n    const material = new THREE.ShaderMaterial({\n      uniforms,\n      vertexShader,\n      fragmentShader\n    });\n    const geometry = new THREE.PlaneGeometry(2, 2);\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    const animate = () => {\n      uniforms.u_time.value += 0.05;\n      renderer.render(scene, camera);\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    // Store the animation frame ID for cleanup\n    let animationFrameId = requestAnimationFrame(animate);\n\n    // Handle window resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      uniforms.u_resolution.value.set(width, height);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Fix 3: Proper cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameId);\n\n      // Clean up THREE.js resources\n      geometry.dispose();\n      material.dispose();\n\n      // Fix 4: Safely remove from DOM\n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: -1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n_s(ShaderBackground, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ShaderBackground;\nexport default ShaderBackground;\nvar _c;\n$RefreshReg$(_c, \"ShaderBackground\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","jsxDEV","_jsxDEV","vertexShader","fragmentShader","ShaderBackground","_s","mountRef","width","window","innerWidth","height","innerHeight","current","scene","Scene","camera","Camera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","appendChild","domElement","uniforms","u_time","value","u_resolution","Vector2","material","ShaderMaterial","geometry","PlaneGeometry","mesh","Mesh","add","animate","render","animationFrameId","requestAnimationFrame","handleResize","set","addEventListener","removeEventListener","cancelAnimationFrame","dispose","removeChild","ref","style","top","left","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/MERN-FIA-PORTAL/client/src/components/ShaderGradient.js"],"sourcesContent":["// // src/components/ShaderBackground.tsx\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import * as THREE from \"three\";\r\n// import vertexShader from \"../shaders/vertex.glsl\";\r\n// import fragmentShader from \"../shaders/fragment.glsl\";\r\n\r\n// const ShaderBackground = () => {\r\n//     const mountRef = useRef<HTMLDivElement>(null);\r\n\r\n//     useEffect(() => {\r\n//         const width = window.innerWidth;\r\n//         const height = window.innerHeight;\r\n\r\n//         const scene = new THREE.Scene();\r\n//         const camera = new THREE.Camera();\r\n//         camera.position.z = 1;\r\n\r\n//         const renderer = new THREE.WebGLRenderer();\r\n//         renderer.setSize(width, height);\r\n//         if (mountRef.current) {\r\n//             mountRef.current.appendChild(renderer.domElement);\r\n//         }\r\n\r\n//         const uniforms = {\r\n//         u_time: { value: 0.0 },\r\n//         u_resolution: { value: new THREE.Vector2(width, height) },\r\n//         };\r\n\r\n//         const material = new THREE.ShaderMaterial({\r\n//         uniforms,\r\n//         vertexShader,\r\n//         fragmentShader,\r\n//         });\r\n\r\n//         const geometry = new THREE.PlaneGeometry(2, 2);\r\n//         const mesh = new THREE.Mesh(geometry, material);\r\n//         scene.add(mesh);\r\n\r\n//         const animate = () => {\r\n//         uniforms.u_time.value += 0.05;\r\n//         renderer.render(scene, camera);\r\n//         requestAnimationFrame(animate);\r\n//         };\r\n\r\n//         animate();\r\n//         if (mountRef.current) {\r\n//             mountRef.current.removeChild(renderer.domElement);\r\n//         }\r\n//         return () => {\r\n//         if (mountRef.current) {\r\n//             mountRef.current.removeChild(renderer.domElement);\r\n//         }\r\n//         };\r\n//     }, []);\r\n\r\n//     return <div ref={mountRef} style={{ position: \"fixed\", top: 0, left: 0, width: \"100%\", height: \"100%\", zIndex: -1 }} />;\r\n// };\r\n\r\n// export default ShaderBackground;\r\n\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n\r\n// Simplified shader code since you may not have separate .glsl files\r\nconst vertexShader = `\r\n    varying vec2 vUv;\r\n    void main() {\r\n        vUv = uv;\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n    `;\r\n\r\n    const fragmentShader = `\r\n    uniform float u_time;\r\n    uniform vec2 u_resolution;\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n        vec2 st = vUv;\r\n        vec3 color1 = vec3(0.98, 0.31, 0.02); // #ff5005\r\n        vec3 color2 = vec3(0.86, 0.73, 0.58); // #dbba95\r\n        vec3 color3 = vec3(0.82, 0.74, 0.88); // #d0bce1\r\n        \r\n        // Create animated gradient\r\n        float t = u_time * 0.4;\r\n        vec2 pos = st * 2.0 - 1.0;\r\n        float d = length(pos) * 1.3;\r\n        float wave = sin(d * 5.5 - t) * 4.0 * (1.0 - d);\r\n        wave = max(0.0, wave);\r\n        \r\n        // Mix colors\r\n        vec3 color = mix(color1, color2, st.x);\r\n        color = mix(color, color3, st.y);\r\n        color = mix(color, vec3(1.0), wave * 0.3);\r\n        \r\n        gl_FragColor = vec4(color, 1.0);\r\n    }\r\n`;\r\n\r\nconst ShaderBackground = () => {\r\n    // Fix 1: Use useRef without TypeScript generic syntax\r\n    const mountRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n\r\n        // Only proceed if the ref is attached\r\n        if (!mountRef.current) return;\r\n\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.Camera();\r\n        camera.position.z = 1;\r\n\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(width, height);\r\n        \r\n        // Fix 2: Use the current property safely\r\n        mountRef.current.appendChild(renderer.domElement);\r\n\r\n        const uniforms = {\r\n            u_time: { value: 0.0 },\r\n            u_resolution: { value: new THREE.Vector2(width, height) },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms,\r\n            vertexShader,\r\n            fragmentShader,\r\n        });\r\n\r\n        const geometry = new THREE.PlaneGeometry(2, 2);\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        scene.add(mesh);\r\n\r\n        const animate = () => {\r\n            uniforms.u_time.value += 0.05;\r\n            renderer.render(scene, camera);\r\n            animationFrameId = requestAnimationFrame(animate);\r\n        };\r\n\r\n        // Store the animation frame ID for cleanup\r\n        let animationFrameId = requestAnimationFrame(animate);\r\n\r\n        // Handle window resize\r\n        const handleResize = () => {\r\n            const width = window.innerWidth;\r\n            const height = window.innerHeight;\r\n            \r\n            renderer.setSize(width, height);\r\n            uniforms.u_resolution.value.set(width, height);\r\n        };\r\n        \r\n        window.addEventListener('resize', handleResize);\r\n\r\n        // Fix 3: Proper cleanup function\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            cancelAnimationFrame(animationFrameId);\r\n            \r\n            // Clean up THREE.js resources\r\n            geometry.dispose();\r\n            material.dispose();\r\n            \r\n            // Fix 4: Safely remove from DOM\r\n            if (mountRef.current) {\r\n                mountRef.current.removeChild(renderer.domElement);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div \r\n            ref={mountRef} \r\n            style={{ \r\n                position: \"fixed\", \r\n                top: 0, \r\n                left: 0, \r\n                width: \"100%\", \r\n                height: \"100%\", \r\n                zIndex: -1 \r\n            }} \r\n        />\r\n    );\r\n};\r\n\r\nexport default ShaderBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}